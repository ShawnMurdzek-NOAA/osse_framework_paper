"""
Plot Distributions of Ob Counts and O-B Boxplots

This script uses a pickle file generated by py_scripts/gsi/diag_omf_cts_boxplots.py

shawn.s.murdzek@noaa.gov
"""

#---------------------------------------------------------------------------------------------------
# Import Modules
#---------------------------------------------------------------------------------------------------

import xarray as xr
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import datetime as dt
import pickle

import pyDA_utils.gsi_fcts as gsi


#---------------------------------------------------------------------------------------------------
# Input Parameters
#---------------------------------------------------------------------------------------------------

# Input pickle file
pickle_fname = '/work2/noaa/wrfruc/murdzek/src/py_scripts/gsi/omf_diag_paper_assim.pkl'

# Variables to plot
omf_vars = ['ps', 't', 'q', 'u', 'v', 'pw']
omf_units = []

# Option to group observation classes into larger subsets
use_subsets = True
ob_subsets = {'raob':[120, 122, 132, 220, 221, 222],
              'aircft':[130, 131, 133, 134, 135, 230, 231, 232, 233, 234, 235],
              'sfc':[180, 181, 182, 183, 187, 188, 192, 193, 194, 195, 280, 281, 282, 284, 287, 
                     288, 292, 293, 294, 295],
              'gps':[153]}

# Output directory and string to add to output file names
out_file = '../figs/DAstats.pdf'


#---------------------------------------------------------------------------------------------------
# Read Data
#---------------------------------------------------------------------------------------------------

with open(pickle_fname, 'rb') as handle:
    all_data = pickle.load(handle)
    plot_data = all_data['plot_data']

ob_groups = list(ob_subsets.keys())


#---------------------------------------------------------------------------------------------------
# Make Plot
#---------------------------------------------------------------------------------------------------

fig, axes = plt.subplots(nrows=6, ncols=2, figsize=(6, 10), sharey=True)
plt.subplots_adjust(left=0.05, bottom=0.05, right=0.95, top=0.92)

letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
for i, (var, units) in enumerate(zip(omf_vars, omf_units)):

    # Plot data 
    ylocs = np.arange(len(ob_groups))
    nsims = len(data_names)
    bar_hgt = 0.8 / nsims
    colors = ['b', 'r', 'c', 'g', 'goldenrod', 'purple']
    if (nsims % 2) == 0:
        offsets = bar_hgt * np.arange(-(nsims-1), nsims, 2)  / 2.
    else:
        offsets = bar_hgt * np.arange(-int(nsims / 2), int(nsims / 2) + 0.5)
    for key, off, c in zip(data_names, offsets, colors):
        ax_ct = axes[i, 0]
        ax_ct.barh(ylocs+off, plot_data[var][key]['n_assim'], height=bar_hgt, label=key, color=c)
        ax_ct.set_xlabel('# obs assimilated', size=14)
        ax_ct.set_xscale('log')
        ax_ct.set_xlim(left=1)
        
        ax_omb = axes[i, 1]
        ax_omb.boxplot(plot_data[var][key]['omb'], positions=(ylocs+off), widths=bar_hgt, vert=False, patch_artist=True,
                       boxprops={'facecolor':c}, showfliers=False)
        ax_omb.set_xlabel('O$-$B (%s)' % units, size=14)

    for j in range(2):
        axes[i, j].grid(axis='x')

    axes[i, 0].set_ylabel('observation type', size=14)
    plt.sca(axes[i, 0])
    plt.yticks(ticks=ylocs, labels=ob_groups)
    
axes[0, 0].legend(fontsize=12)

plt.savefig(out_file) 
plt.close()


"""
End plot_DA_diags.py
"""
